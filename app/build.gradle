apply plugin: 'com.android.application'
android {

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    useLibrary 'org.apache.http.legacy'
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11"
                arguments '-DANDROID_STL=c++_shared'
            }
        }
        multiDexEnabled true

        ndk {
            //选择要添加的对应 cpu 类型的 .so 库。
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64', 'mips', 'mips64'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
        }
        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "0992499794e9795e7af8b637", //JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]
    }

    /* externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }*/


    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }


   /* splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk true
        }
    }*/

    // Map for the version code that gives each ABI a value.
    def abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, 'x86': 3, 'x86_64': 4]

    // Enumerate translated locales
    def availableLocales = ["en"]
    new File("app/src/main/res/").eachFileMatch(~/^values-.*/) { file ->
        def languageTag = file.name.substring(7).replace("-r", "-")
        availableLocales.add(languageTag)
    }

    // APKs for the same app that all have the same version information.
    android.applicationVariants.all { variant ->
        // Update string resource: available_locales
        variant.resValue("string", "available_locales", availableLocales.join(","))
        // Assigns a different version code for each output APK.
        variant.outputs.all {
            output ->
                def abiName = output.getFilter(com.android.build.OutputFile.ABI)
                output.versionCodeOverride = abiCodes.get(abiName, 0) + 10 * variant.versionCode
                //def flavor = output.getFilter(flavor)

                if (abiName == null) abiName = "universal"
                def v = "${variant.versionName}".replaceFirst(" '.*' ?", "")
                        .replace(".", "x")
                        .replace("(", "-")
                        .replace(")", "")
                outputFileName = "$rootProject.ext.apkName-" + v + "_" + abiName + ".apk"
        }
    }

    dataBinding {
        enabled true
    }


    dynamicFeatures = [":dynamic_feature"]


}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation project(':RxKit')
    implementation project(':RxUI')
    //MVVMHabit
    implementation project(':mvvmhabit')

    implementation 'com.github.lwjfork:CodeEditText:1.0.4'

    testImplementation 'junit:junit:4.12'
    implementation 'com.nulab-inc:zxcvbn:1.2.3'
    //support
    implementation rootProject.ext.support["design"]
    implementation 'com.jakewharton.timber:timber:4.7.0'
    //下拉刷新,上拉加载
    implementation 'com.lcodecorex:tkrefreshlayout:1.0.7'
    implementation 'com.github.itlwy:LPopupMenu:v1.1'
    //底部tabBar
    implementation 'me.majiajie:pager-bottom-tab-strip:2.2.5'
    //轮播图
    implementation 'cn.bingoogolapple:bga-banner:2.2.5@aar'

    //Joda-Time
    implementation 'joda-time:joda-time:2.10.2'


    implementation 'io.reactivex:rxjava:1.2.0'
    implementation 'io.reactivex:rxandroid:1.2.1'
    implementation 'org.ligboy.retrofit2:converter-fastjson-android:2.1.0'
    //多项选择器，切换按钮
    implementation project(':libk-switchbutton')
    //多项选择器，切换按钮
    implementation project(':SwitchTabView')
    //https://github.com/promeG/TinyPinyin
    implementation 'com.github.promeg:tinypinyin:2.0.3'
    //    implementation rootProject.ext.dependencies.MVVMHabit

    implementation "com.burgstaller:okhttp-digest:1.18"

    implementation 'com.github.paradoxie:AutoVerticalTextview:0.1'

    //内存泄漏测试
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.2'
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.2'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    implementation 'me.dm7.barcodescanner:zxing:1.9.9'
    implementation 'com.contrarywind:Android-PickerView:4.1.7'
    implementation 'com.github.yalantis:ucrop:2.2.2-native'
    implementation 'dnsjava:dnsjava:2.1.8'
    implementation 'org.jitsi:dnssecjava:1.1.3'
    implementation 'org.slf4j:slf4j-nop:1.7.25'


    implementation 'cn.jiguang.sdk:jpush:3.2.0'
    // 此处以JPush 3.2.0 版本为例。
    implementation 'cn.jiguang.sdk:jmessage:2.8.2'
    // 此处以JMessage 2.8.2 版本为例。
    implementation 'cn.jiguang.sdk:jcore:1.2.7'
    // 此处以JCore 1.2.7 版本为例。



}
